// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SpreadShare.SupportServices;

#pragma warning disable

namespace SpreadShare.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("SpreadShare.Models.Database.BacktestOrder", b =>
                {
                    b.Property<long>("OrderId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Assets");

                    b.Property<long>("CreatedTimestamp");

                    b.Property<decimal>("FilledPrice");

                    b.Property<decimal>("FilledQuantity");

                    b.Property<long>("FilledTimestamp");

                    b.Property<string>("OrderStatus");

                    b.Property<string>("OrderType");

                    b.Property<string>("Pair");

                    b.Property<decimal>("SetPrice");

                    b.Property<decimal>("SetQuantity");

                    b.Property<string>("Side");

                    b.Property<decimal>("StopPrice");

                    b.Property<long>("TradeId");

                    b.Property<decimal>("Value");

                    b.HasKey("OrderId");

                    b.ToTable("BacktestOrders");
                });

            modelBuilder.Entity("SpreadShare.Models.Database.BacktestingCandle", b =>
                {
                    b.Property<long>("Timestamp");

                    b.Property<string>("TradingPair");

                    b.Property<decimal>("Close");

                    b.Property<decimal>("High");

                    b.Property<decimal>("Low");

                    b.Property<decimal>("Open");

                    b.Property<decimal>("Volume");

                    b.HasKey("Timestamp", "TradingPair");

                    b.ToTable("Candles");
                });

            modelBuilder.Entity("SpreadShare.Models.Database.OrderEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CreatedTimestamp");

                    b.Property<long>("EventTimestamp");

                    b.Property<decimal>("FilledPrice");

                    b.Property<decimal>("FilledQuantity");

                    b.Property<long>("FilledTimestamp");

                    b.Property<long>("OrderId");

                    b.Property<string>("OrderStatus");

                    b.Property<string>("OrderType");

                    b.Property<string>("Pair");

                    b.Property<decimal>("SetPrice");

                    b.Property<decimal>("SetQuantity");

                    b.Property<string>("Side");

                    b.Property<decimal>("StopPrice");

                    b.Property<long>("TradeId");

                    b.HasKey("Id");

                    b.ToTable("OrderEvents");
                });

            modelBuilder.Entity("SpreadShare.Models.Database.StateSwitchEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("From");

                    b.Property<long>("Timestamp");

                    b.Property<string>("To");

                    b.HasKey("Id");

                    b.ToTable("StateSwitchEvents");
                });
#pragma warning restore 612, 618
        }
    }
}

#pragma warning restore
